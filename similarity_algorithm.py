# -*- coding: utf-8 -*-
"""Similarity Algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZUNLBnBX9ZIoiN0aNIRj4BxLR5HRHEaD
"""

!pip install scikit-learn
!pip install pandas
!pip install streamlit

pip install sentence-transformers

path ='/content/taylor_swift_lyrics_with_features.csv'
songs_df = pd.read_csv(path)

from sentence_transformers import SentenceTransformer, util
import torch

# Load the SBERT model
model = SentenceTransformer('paraphrase-MiniLM-L6-v2')

# Get embeddings for each song's lyrics
lyrics_embeddings = model.encode(songs_df['Processed Lyrics'].tolist(), convert_to_tensor=True)

# Function to recommend songs based on lyrics input
def recommend_songs_advanced(user_input, top_n=5):
    # Encode the user input into SBERT embedding
    user_input_embedding = model.encode(user_input, convert_to_tensor=True)

    # Compute cosine similarity between user input and all song lyrics embeddings
    cosine_similarities = util.pytorch_cos_sim(user_input_embedding, lyrics_embeddings).squeeze(0)

    # Get the top N most similar songs
    top_n_indices = torch.topk(cosine_similarities, k=top_n).indices

    # Return the most similar songs
    return songs_df.iloc[top_n_indices.cpu().numpy()][['Song Name', 'Album', 'Lyrics', 'Sentiment', 'Word Count']]

def recommend_songs_with_percentage(user_input, top_n=3):
    # Encode the user input into SBERT embedding
    user_input_embedding = model.encode(user_input, convert_to_tensor=True)

    # Compute cosine similarity between user input and all song lyrics embeddings
    cosine_similarities = util.pytorch_cos_sim(user_input_embedding, lyrics_embeddings).squeeze(0)

    # Normalize the cosine similarities to percentages
    match_percentages = cosine_similarities / cosine_similarities.max() * 100

    # Get the top N most similar songs
    top_n_indices = torch.topk(cosine_similarities, k=top_n).indices

    # Return the most similar songs along with their match percentages
    return songs_df.iloc[top_n_indices.cpu().numpy()][['Song Name', 'Album', 'Lyrics']], match_percentages[top_n_indices].cpu().numpy()

# Test the function
user_input = "christmas light"
recommendations = recommend_songs_advanced(user_input)
print(recommendations)

